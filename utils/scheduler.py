import logging
from datetime import datetime, timedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.base import JobLookupError

from config import REMINDER_HOURS_BEFORE, ADMIN_ID, DAILY_REPORT_TIME, WEEKLY_REPORT_DAY_OF_WEEK, WEEKLY_REPORT_TIME
from database.db import get_all_bookings
from utils.bot_instance import bot_instance
from utils.reports import generate_period_report_text

logger = logging.getLogger(__name__)

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")


async def send_report(period_days: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if ADMIN_ID and bot_instance.bot:
        now = datetime.now()
        start_date = now - timedelta(days=period_days)
        report_text = await generate_period_report_text(start_date, now)
        await bot_instance.bot.send_message(ADMIN_ID, report_text)
        logger.info(f"Sent {period_days}-day report to admin {ADMIN_ID}")


async def send_booking_reminder(user_id: int, booking_id: int, service: str, date_str: str, time_str: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        text = (
            f"üëã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏!\n\n"
            f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É <b>{service}</b>.\n"
            f"–ñ–¥–µ–º –≤–∞—Å –∑–∞–≤—Ç—Ä–∞, <b>{date_str}</b> –≤ <b>{time_str}</b>.\n\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏!"
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        if bot_instance.bot:
            await bot_instance.bot.send_message(user_id, text)
        else:
            logger.error("Bot instance is not available in scheduler. Cannot send reminder.")
        logger.info(f"Sent reminder for booking #{booking_id} to user {user_id}")
    except Exception as e:
        logger.error(f"Failed to send reminder for booking #{booking_id} to user {user_id}: {e}")


async def schedule_reminder(booking: dict):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    try:
        booking_time_str = f"{booking['date']} {booking['time']}"
        booking_time = datetime.strptime(booking_time_str, "%d.%m.%Y %H:%M")

        reminder_time = booking_time - timedelta(hours=REMINDER_HOURS_BEFORE)

        if reminder_time > datetime.now():
            scheduler.add_job(
                send_booking_reminder,
                'date',
                run_date=reminder_time,
                args=[booking['user_id'], booking['id'], booking['service'], booking['date'], booking['time']],
                id=f"reminder_{booking['id']}",
                replace_existing=True
            )
            logger.info(f"Scheduled reminder for booking #{booking['id']} at {reminder_time}")
    except Exception as e:
        logger.error(f"Failed to schedule reminder for booking #{booking['id']}: {e}")


async def cancel_reminder(booking_id: int):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    job_id = f"reminder_{booking_id}"
    try:
        scheduler.remove_job(job_id)
        logger.info(f"Cancelled reminder for booking #{booking_id}")
    except JobLookupError:
        logger.warning(f"Could not find reminder job to cancel for booking #{booking_id}. It might have already been sent or was never scheduled.")
    except Exception as e:
        logger.error(f"Error cancelling reminder for booking #{booking_id}: {e}")


async def schedule_existing_reminders():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logger.info("Scheduling reminders for existing bookings...")
    all_bookings = await get_all_bookings()
    for booking in all_bookings:
        await schedule_reminder(booking)


def schedule_reports():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."""
    try:
        daily_hour, daily_minute = map(int, DAILY_REPORT_TIME.split(':'))
        weekly_hour, weekly_minute = map(int, WEEKLY_REPORT_TIME.split(':'))
        scheduler.add_job(send_report, 'cron', day_of_week='*', hour=daily_hour, minute=daily_minute, args=[1], id="daily_report")
        scheduler.add_job(send_report, 'cron', day_of_week=WEEKLY_REPORT_DAY_OF_WEEK, hour=weekly_hour, minute=weekly_minute, args=[7], id="weekly_report")
        logger.info(f"Scheduled daily reports for {DAILY_REPORT_TIME} and weekly for {WEEKLY_REPORT_DAY_OF_WEEK} at {WEEKLY_REPORT_TIME}.")
    except Exception as e:
        logger.error(f"Failed to schedule reports: {e}")