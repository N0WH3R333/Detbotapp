from collections import Counter
from datetime import datetime

from database.db import get_all_bookings, get_all_orders


def _get_top_clients_text(records: list, top_n: int = 3) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–æ–ø-N –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π/–∑–∞–∫–∞–∑–æ–≤."""
    if not records:
        return ""

    user_counts = Counter(r['user_id'] for r in records if 'user_id' in r)
    if not user_counts:
        return ""

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_info = {}
    for record in records:
        if 'user_id' in record and record['user_id'] not in user_info:
            user_info[record['user_id']] = {
                'name': record.get('user_full_name'),
                'username': record.get('user_username')
            }

    text = f"\n\nüèÜ <b>–¢–æ–ø-{top_n} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
    for user_id, count in user_counts.most_common(top_n):
        info = user_info.get(user_id, {})
        name = info.get('name')
        username = info.get('username')

        if name:
            user_str = f"{name}"
            if username:
                user_str += f" (@{username})"
        else:
            user_str = f"ID: <code>{user_id}</code>"

        text += f"  ‚Ä¢ {user_str}: {count} —Ä–∞–∑(–∞)\n"

    return text


async def generate_period_report_text(start_date: datetime, end_date: datetime) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    all_bookings = await get_all_bookings()
    all_orders = await get_all_orders()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
    period_bookings = [
        b for b in all_bookings
        if 'date' in b and start_date <= datetime.strptime(b['date'], "%d.%m.%Y").replace(hour=0, minute=0, second=0) < end_date
    ]
    period_orders = [
        o for o in all_orders
        if 'date' in o and start_date <= datetime.strptime(o['date'], "%Y-%m-%d %H:%M:%S") < end_date
    ]

    # –†–∞—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    total_revenue_orders = sum(o.get('total_price', 0) for o in period_orders)
    avg_check_orders = total_revenue_orders / len(period_orders) if period_orders else 0

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    all_records = period_bookings + period_orders
    repeat_customer_rate = 0
    if all_records:
        user_counts = Counter(r['user_id'] for r in all_records)
        total_customers = len(user_counts)
        repeat_customers = sum(1 for count in user_counts.values() if count > 1)
        if total_customers > 0:
            repeat_customer_rate = (repeat_customers / total_customers) * 100

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    period_days = (end_date - start_date).days
    if period_days <= 1:
        title = "–û—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å"
    elif 6 <= period_days <= 8:
        title = "–û—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é"
    else:
        title = "–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥"

    report_text = (
        f"üìä <b>{title}</b>\n"
        f"({start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')})\n\n"
        f"<b>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"  - üìù –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: <b>{len(period_bookings)}</b>\n"
        f"  - üõí –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{len(period_orders)}</b>\n"
        f"  - üí∞ –í—ã—Ä—É—á–∫–∞ —Å –∑–∞–∫–∞–∑–æ–≤: <b>{total_revenue_orders:.2f} —Ä—É–±.</b>\n"
        f"  - üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–∑–∞–∫–∞–∑—ã): <b>{avg_check_orders:.2f} —Ä—É–±.</b>\n"
        f"  - üîÑ –ö–æ—ç—Ñ. –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: <b>{repeat_customer_rate:.1f}%</b>\n"
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ–±—â–µ–≥–æ —Ç–æ–ø–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    report_text += _get_top_clients_text(all_records)

    return report_text