from datetime import datetime, date, timedelta
import calendar
import logging
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from collections import Counter

from keyboards.inline import get_services_keyboard, get_time_slots_keyboard, get_payment_keyboard
from keyboards.calendar import create_calendar, CalendarCallback
from database.db import add_booking_to_db, get_all_bookings
from keyboards.reply import get_main_menu_keyboard
from config import WEBAPP_URL, MAX_PARALLEL_BOOKINGS
from utils.scheduler import schedule_reminder

logger = logging.getLogger(__name__)
router = Router()

ALL_TIME_SLOTS = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"]

SERVICES_DB = {
    "service_complex": {"name": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞", "price": 2500, "duration_hours": 2},
    "service_polish": {"name": "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞", "price": 10000, "duration_hours": 6},
    "service_dryclean": {"name": "–•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞", "price": 5000, "duration_hours": 4},
}


def _get_daily_load(bookings_on_date: list[dict]) -> Counter:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    daily_load = Counter()
    for booking in bookings_on_date:
        try:
            start_hour = int(booking['time'].split(':')[0])
            duration = booking.get('duration_hours', 1)
            for i in range(duration):
                hour = start_hour + i
                time_slot = f"{hour:02d}:00"
                if time_slot in ALL_TIME_SLOTS:
                    daily_load[time_slot] += 1
        except (ValueError, KeyError, IndexError):
            continue
    return daily_load


def _calculate_unavailable_dates(bookings: list[dict], year: int, month: int) -> list[date]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å—É–º–º–∞—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ —á–∞—Å–∞–º.
    –î–µ–Ω—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º, –µ—Å–ª–∏ –≤ –Ω–µ–º –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å–∞–º–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —É—Å–ª—É–≥–∏.
    """
    shortest_service_duration = min(s.get('duration_hours', 1) for s in SERVICES_DB.values())

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–∞–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    bookings_by_date = {}
    for b in bookings:
        try:
            booking_date_obj = datetime.strptime(b['date'], '%d.%m.%Y')
            if booking_date_obj.year == year and booking_date_obj.month == month:
                if b['date'] not in bookings_by_date:
                    bookings_by_date[b['date']] = []
                bookings_by_date[b['date']].append(b)
        except (ValueError, KeyError):
            continue

    fully_booked_dates = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    num_days_in_month = calendar.monthrange(year, month)[1]
    for day in range(1, num_days_in_month + 1):
        current_date_str = f"{day:02d}.{month:02d}.{year}"
        bookings_on_this_day = bookings_by_date.get(current_date_str, [])
        daily_load = _get_daily_load(bookings_on_this_day)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–∞–º—É—é –∫–æ—Ä–æ—Ç–∫—É—é —É—Å–ª—É–≥—É
        can_fit_shortest_service = False
        for i in range(len(ALL_TIME_SLOTS) - shortest_service_duration + 1):
            is_slot_available = all(daily_load[ALL_TIME_SLOTS[i + j]] < MAX_PARALLEL_BOOKINGS for j in range(shortest_service_duration))
            if is_slot_available:
                can_fit_shortest_service = True
                break  # –ù–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç, –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–µ–Ω

        if not can_fit_shortest_service:
            fully_booked_dates.append(date(year, month, day))

    return fully_booked_dates

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (FSM) –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
class BookingStates(StatesGroup):
    choosing_service = State()
    choosing_date = State()
    choosing_time = State()
    payment_confirmation = State()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É"
@router.message(F.text == "üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É")
async def start_booking(message: Message, state: FSMContext):
    logger.debug(f"User {message.from_user.id} started booking process.")
    # –£–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥:", reply_markup=get_services_keyboard(SERVICES_DB))
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    await state.set_state(BookingStates.choosing_service)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
@router.callback_query(BookingStates.choosing_service, F.data == "back_to_main_menu")
async def back_to_main_from_services(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_main_menu_keyboard(webapp_url=WEBAPP_URL)
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ (–ª–æ–≤–∏—Ç callback)
@router.callback_query(BookingStates.choosing_service, F.data.startswith("service_"))
async def service_chosen(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"User {callback.from_user.id} chose service. Callback: {callback.data}")
    service_id = callback.data
    service_info = SERVICES_DB.get(service_id)

    if not service_info:
        await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ FSM
    await state.update_data(
        chosen_service_id=service_id,
        **service_info
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–∞—è –æ –≤—ã–±–æ—Ä–µ
    all_bookings = await get_all_bookings()
    now = datetime.now()
    unavailable_dates = _calculate_unavailable_dates(all_bookings, now.year, now.month)
    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: {service_info['name']}.\n\n"
        f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.",
        reply_markup=create_calendar(unavailable_dates=unavailable_dates)
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await state.set_state(BookingStates.choosing_date)
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é (–≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥)
@router.callback_query(BookingStates.choosing_date, CalendarCallback.filter(F.action.in_(["prev-month", "next-month"])))
async def calendar_navigate(callback: CallbackQuery, callback_data: CalendarCallback):
    year, month = callback_data.year, callback_data.month

    if callback_data.action == "prev-month":
        month -= 1
        if month == 0:
            month = 12
            year -= 1
    else:  # "next-month"
        month += 1
        if month == 13:
            month = 1
            year += 1

    all_bookings = await get_all_bookings()
    unavailable_dates = _calculate_unavailable_dates(all_bookings, year, month)
    await callback.message.edit_reply_markup(reply_markup=create_calendar(year=year, month=month, unavailable_dates=unavailable_dates))
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥"
@router.callback_query(BookingStates.choosing_date, F.data == "back_to_services")
async def back_to_services(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥:",
        reply_markup=get_services_keyboard(SERVICES_DB)
    )
    await state.set_state(BookingStates.choosing_service)
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
@router.callback_query(BookingStates.choosing_date, CalendarCallback.filter(F.action == "select-day"))
async def date_chosen(callback: CallbackQuery, callback_data: CalendarCallback, state: FSMContext):
    chosen_date_str = datetime(year=callback_data.year, month=callback_data.month, day=callback_data.day).strftime("%d.%m.%Y")
    user_data = await state.get_data()
    service_duration = user_data.get('duration_hours', 1)
    all_bookings = await get_all_bookings()

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ —Å—á–∏—Ç–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ —á–∞—Å–∞–º
    bookings_on_date = [b for b in all_bookings if b['date'] == chosen_date_str]
    daily_load = _get_daily_load(bookings_on_date)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
    available_slots = []
    for i in range(len(ALL_TIME_SLOTS) - service_duration + 1):
        slot_is_free = True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–π–º–µ—Ç —É—Å–ª—É–≥–∞
        for j in range(service_duration):
            slot_to_check = ALL_TIME_SLOTS[i + j]
            if daily_load[slot_to_check] >= MAX_PARALLEL_BOOKINGS:
                slot_is_free = False
                break
        if slot_is_free:
            available_slots.append(ALL_TIME_SLOTS[i])

    await state.update_data(chosen_date=chosen_date_str)

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {chosen_date_str}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_time_slots_keyboard(available_slots=available_slots)
    )
    await state.set_state(BookingStates.choosing_time)
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"
@router.callback_query(BookingStates.choosing_time, F.data == "back_to_calendar")
async def back_to_calendar(callback: CallbackQuery, state: FSMContext):
    all_bookings = await get_all_bookings()
    now = datetime.now()
    unavailable_dates = _calculate_unavailable_dates(all_bookings, now.year, now.month)
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.",
        reply_markup=create_calendar(unavailable_dates=unavailable_dates)
    )
    await state.set_state(BookingStates.choosing_date)
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(BookingStates.choosing_time, F.data.startswith("time_"))
async def time_chosen(callback: CallbackQuery, state: FSMContext):
    chosen_time = callback.data.split("_")[1]
    await state.update_data(chosen_time=chosen_time)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    user_data = await state.get_data()
    service_name = user_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    service_price = user_data.get("price", 0)
    chosen_date = user_data.get("chosen_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    await callback.message.edit_text(
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å:</b>\n\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {service_name}\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service_price} —Ä—É–±.\n"
        f"<b>–î–∞—Ç–∞:</b> {chosen_date}\n"
        f"<b>–í—Ä–µ–º—è:</b> {chosen_time}\n\n"
        f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞.",
        reply_markup=get_payment_keyboard()
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(BookingStates.payment_confirmation)
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ "–æ–ø–ª–∞—Ç—ã"
@router.callback_query(BookingStates.payment_confirmation, F.data == "confirm_payment")
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    user_data = await state.get_data()
    user = callback.from_user

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
    new_booking = {
        "service": user_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"),
        "price": user_data.get("price", 0),
        "duration_hours": user_data.get("duration_hours", 1),
        "date": user_data.get("chosen_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"),
        "time": user_data.get("chosen_time", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"),
    }

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—à—É "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    new_booking_obj = await add_booking_to_db(
        user_id=user.id,
        user_full_name=user.full_name,
        user_username=user.username,
        booking_data=new_booking
    )

    # 3.5. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await schedule_reminder(new_booking_obj)

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º FSM
    await callback.message.edit_text("‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.</b>\n\n–ú—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å!")
    await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard(webapp_url=WEBAPP_URL))
    await state.clear()
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(BookingStates.payment_confirmation, F.data == "cancel_booking")
async def cancel_booking(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard(webapp_url=WEBAPP_URL))
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.clear()
    await callback.answer()