import logging
import math

from aiogram import F, Router, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.db import get_all_candidates, delete_candidate_in_db
from keyboards.admin_inline import (
    get_candidates_list_keyboard, AdminManageCandidate, AdminCandidatesPaginator,
    get_back_to_menu_keyboard
)
from .states import AdminStates

ADMIN_ITEMS_PER_PAGE = 5
logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "admin_candidates_management")
async def candidates_management_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    await state.clear()
    all_candidates = sorted(await get_all_candidates(), key=lambda x: x['id'], reverse=True)

    if not all_candidates:
        await callback.message.edit_text(
            "–ù–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ—Ç.",
            reply_markup=get_back_to_menu_keyboard("admin_back_to_main")
        )
        await callback.answer()
        return

    await state.update_data(all_candidates=all_candidates)

    page = 0
    total_pages = math.ceil(len(all_candidates) / ADMIN_ITEMS_PER_PAGE)
    candidates_on_page = all_candidates[0:ADMIN_ITEMS_PER_PAGE]

    await callback.message.edit_text(
        "üì¨ <b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_candidates_list_keyboard(candidates_on_page, page, total_pages)
    )
    await callback.answer()


@router.callback_query(AdminCandidatesPaginator.filter())
async def paginate_admin_candidates(callback: CallbackQuery, callback_data: AdminCandidatesPaginator, state: FSMContext):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    page = callback_data.page
    if callback_data.action == "next":
        page += 1
    elif callback_data.action == "prev":
        page -= 1

    data = await state.get_data()
    all_candidates = data.get('all_candidates', [])

    if not all_candidates:
        await candidates_management_start(callback, state)
        return

    total_pages = math.ceil(len(all_candidates) / ADMIN_ITEMS_PER_PAGE)
    candidates_on_page = all_candidates[page * ADMIN_ITEMS_PER_PAGE:(page + 1) * ADMIN_ITEMS_PER_PAGE]

    await callback.message.edit_text(
        "üì¨ <b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_candidates_list_keyboard(candidates_on_page, page, total_pages)
    )
    await callback.answer()


@router.callback_query(AdminManageCandidate.filter(F.action == "view"))
async def view_candidate(callback: CallbackQuery, callback_data: AdminManageCandidate, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª–∏–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    candidate_id = callback_data.candidate_id
    page = callback_data.page

    data = await state.get_data()
    all_candidates = data.get('all_candidates', await get_all_candidates())
    candidate = next((c for c in all_candidates if c.get('id') == candidate_id), None)

    if not candidate:
        await callback.answer("–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        return

    text = (
        f"<b>–û—Ç–∫–ª–∏–∫ #{candidate['id']} –æ—Ç {candidate['received_at']}</b>\n\n"
        f"<b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {candidate['user_full_name']}\n"
        f"<b>ID:</b> <code>{candidate['user_id']}</code>\n"
        f"<b>Username:</b> @{candidate.get('user_username') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<pre>{candidate.get('message_text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞.')}</pre>"
    )
    if candidate.get('file_id'):
        text += f"\n\nüìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª:</b> {candidate.get('file_name', '—Ñ–∞–π–ª')}"

    builder = InlineKeyboardBuilder()
    if candidate.get('file_id'):
        builder.button(text="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=AdminManageCandidate(action="get_file", candidate_id=candidate_id, page=page).pack())
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫", callback_data=AdminManageCandidate(action="delete", candidate_id=candidate_id, page=page).pack())
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=AdminManageCandidate(action="back_list", candidate_id=0, page=page).pack())
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminManageCandidate.filter(F.action == "get_file"))
async def get_candidate_file(callback: CallbackQuery, callback_data: AdminManageCandidate, bot: Bot, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É."""
    candidate_id = callback_data.candidate_id
    data = await state.get_data()
    all_candidates = data.get('all_candidates', await get_all_candidates())
    candidate = next((c for c in all_candidates if c.get('id') == candidate_id), None)

    if candidate and candidate.get('file_id'):
        await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
        await bot.send_document(
            chat_id=callback.from_user.id,
            document=candidate['file_id'],
            caption=f"–§–∞–π–ª –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ #{candidate_id} ({candidate['user_full_name']})"
        )
    else:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@router.callback_query(AdminManageCandidate.filter(F.action == "delete"))
async def delete_candidate(callback: CallbackQuery, callback_data: AdminManageCandidate, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫."""
    candidate_id = callback_data.candidate_id
    deleted_candidate = await delete_candidate_in_db(candidate_id)

    if not deleted_candidate:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫.", show_alert=True)
        return

    await callback.answer(f"–û—Ç–∫–ª–∏–∫ #{candidate_id} —É–¥–∞–ª–µ–Ω.", show_alert=False)
    await candidates_management_start(callback, state)


@router.callback_query(AdminManageCandidate.filter(F.action == "back_list"))
async def back_to_candidates_list(callback: CallbackQuery, callback_data: AdminManageCandidate, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    await paginate_admin_candidates(callback, AdminCandidatesPaginator(action="noop", page=callback_data.page), state)