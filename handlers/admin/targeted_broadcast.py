import logging
import re
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.admin_inline import get_back_to_menu_keyboard
from utils.broadcast import send_broadcast
from database.db import get_user_ids_by_phone_numbers

logger = logging.getLogger(__name__)
router = Router()


class TargetedBroadcastStates(StatesGroup):
    getting_phone_numbers = State()
    getting_message = State()
    confirmation = State()


@router.callback_query(F.data == "admin_targeted_broadcast")
async def start_targeted_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–¥—Ä–µ—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.clear()
    await state.set_state(TargetedBroadcastStates.getting_phone_numbers)
    await callback.message.edit_text(
        "<b>üéØ –ê–¥—Ä–µ—Å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. –ö–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª.\n\n"
        "<i>–ë–æ—Ç —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º –∏ –¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.</i>",
        reply_markup=get_back_to_menu_keyboard("admin_back_to_main")
    )
    await callback.answer()


@router.message(TargetedBroadcastStates.getting_phone_numbers, F.text)
async def get_phone_numbers(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤."""
    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –∑–∞–ø—è—Ç—ã–º, —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
    delimiters = r'[\s,;\n]+'
    phone_numbers_raw = re.split(delimiters, message.text.strip())

    # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    cleaned_numbers = [re.sub(r'\D', '', num) for num in phone_numbers_raw if num]
    cleaned_numbers = list(set(num for num in cleaned_numbers if num)) # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞

    if not cleaned_numbers:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
            reply_markup=get_back_to_menu_keyboard("admin_back_to_main")
        )
        return

    found_users_map = await get_user_ids_by_phone_numbers(cleaned_numbers)
    found_user_ids = list(found_users_map.values())

    # –î–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–∞–º –Ω—É–∂–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ç–æ–º –≤–∏–¥–µ, –∫–∞–∫ –∏—Ö –≤–≤–µ–ª–∏ (–æ—á–∏—â–µ–Ω–Ω–æ–º)
    found_db_numbers = {re.sub(r'\D', '', p) for p in found_users_map.keys()}
    not_found_numbers = [p for p in cleaned_numbers if p not in found_db_numbers]

    await state.update_data(
        target_user_ids=found_user_ids,
        not_found_numbers=not_found_numbers
    )

    if not found_user_ids:
        await message.answer(
            f"‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ {len(cleaned_numbers)} –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.",
            reply_markup=get_back_to_menu_keyboard("admin_back_to_main")
        )
        await state.clear()
        return

    await state.set_state(TargetedBroadcastStates.getting_message)
    await message.answer(
        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(found_user_ids)}</b>\n"
        f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: <b>{len(not_found_numbers)}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=get_back_to_menu_keyboard("admin_targeted_broadcast")
    )


@router.message(TargetedBroadcastStates.getting_message)
async def get_targeted_broadcast_message(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä."""
    await state.update_data(message_id=message.message_id, from_chat_id=message.chat.id)

    await message.answer("–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=message.message_id)

    await state.set_state(TargetedBroadcastStates.confirmation)
    builder = InlineKeyboardBuilder()
    builder.button(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–º", callback_data="targeted_broadcast_send")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="targeted_broadcast_cancel")
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=builder.as_markup())


@router.callback_query(F.data == "targeted_broadcast_send", TargetedBroadcastStates.confirmation)
async def confirm_and_send_targeted(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥—Ä–µ—Å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É."""
    data = await state.get_data()
    target_user_ids = data.get('target_user_ids', [])
    not_found_numbers = data.get('not_found_numbers', [])
    await state.clear()

    await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –∞–¥—Ä–µ—Å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    successful, failed = await send_broadcast(bot=bot, user_ids=target_user_ids, content=data)

    report_text = (
        f"‚úÖ –ê–¥—Ä–µ—Å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì¨ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{successful}</b>\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: <b>{failed}</b>\n\n"
        f"ü§∑‚Äç‚ôÇÔ∏è –ù–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ ({len(not_found_numbers)} —à—Ç.)"
    )
    await callback.message.answer(report_text)
    await callback.answer()


@router.callback_query(F.data == "targeted_broadcast_cancel", StateFilter(TargetedBroadcastStates))
async def cancel_targeted_process(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–¥—Ä–µ—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.clear()
    await callback.message.edit_text("–ê–¥—Ä–µ—Å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()