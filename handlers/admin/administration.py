import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database.db import add_admin, get_admin_list, remove_admin
from keyboards.admin_inline import get_admin_management_keyboard, get_admins_list_keyboard, get_back_to_menu_keyboard
from middlewares.admin_filter import IsSuperAdmin
from .states import AdminStates
from config import SUPER_ADMIN_ID

logger = logging.getLogger(__name__)
router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º—É —Ä–æ—É—Ç–µ—Ä—É, —á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –≤—Å–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
router.message.filter(IsSuperAdmin())
router.callback_query.filter(IsSuperAdmin())


@router.callback_query(F.data == "admin_manage_admins")
async def manage_admins_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏."""
    await callback.message.edit_text(
        "üëë <b>–†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
        reply_markup=get_admin_management_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_remove_admin_start")
async def list_admins(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    admins = await get_admin_list()
    super_admin_info = f"üëë <b>–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω:</b> <code>{SUPER_ADMIN_ID}</code> (–Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π)\n"

    if not admins:
        text = super_admin_info + "\n–û–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    else:
        text = super_admin_info + "\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
        admin_lines = []
        for admin in admins:
            username = f"(@{admin['username']})" if admin['username'] else ""
            admin_lines.append(f"‚Ä¢ {admin['full_name']} {username} (<code>{admin['user_id']}</code>)")
        text += "\n".join(admin_lines)

    await callback.message.edit_text(
        text,
        reply_markup=get_admins_list_keyboard(admins)
    )
    await callback.answer()


@router.callback_query(F.data == "admin_add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await state.set_state(AdminStates.entering_add_admin_id)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å.",
        reply_markup=get_back_to_menu_keyboard("admin_manage_admins")
    )
    await callback.answer()


@router.message(AdminStates.entering_add_admin_id, F.text)
async def add_admin_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id_to_add = int(message.text)
    if user_id_to_add == SUPER_ADMIN_ID:
        # –ï—Å–ª–∏ –ø—ã—Ç–∞—é—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
        await state.clear()
        return

    success = await add_admin(user_id_to_add)
    await state.clear()

    if success:
        text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id_to_add}</code> —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    else:
        text = (f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID <code>{user_id_to_add}</code>. "
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

    await message.answer(text, reply_markup=get_admin_management_keyboard())


@router.callback_query(F.data.startswith("admin_remove_admin_"))
async def remove_admin_process(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    user_id_to_remove = int(callback.data.split("_")[-1])
    success = await remove_admin(user_id_to_remove)
    if success:
        await callback.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id_to_remove} —É–¥–∞–ª–µ–Ω.", show_alert=True)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    await list_admins(callback)