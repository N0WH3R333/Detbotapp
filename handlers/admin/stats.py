import logging
import io
import csv
import json
from datetime import datetime
from collections import Counter

from aiogram import F, Router, Bot, types
from aiogram.types import CallbackQuery

from .states import AdminStates
from database.db import get_all_bookings, get_all_orders
from keyboards.admin_inline import get_stats_menu_keyboard, get_back_to_menu_keyboard
from keyboards.calendar import create_stats_calendar, StatsCalendarCallback
from utils.reports import generate_period_report_text
from aiogram.fsm.context import FSMContext

# –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install matplotlib
try:
    import matplotlib.pyplot as plt
except ImportError:
    plt = None

logger = logging.getLogger(__name__)
router = Router()


def _generate_bar_chart(data: Counter, title: str, xlabel: str, ylabel: str) -> io.BytesIO | None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç bar chart –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Counter –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤."""
    if not data or plt is None:
        return None

    labels, values = zip(*data.most_common())

    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax = plt.subplots(figsize=(10, max(6, len(labels) * 0.5)))

    bars = ax.barh(labels, values, color='skyblue')
    ax.set_title(title, fontsize=16, pad=20)
    ax.set_xlabel(ylabel, fontsize=12)
    ax.set_ylabel(xlabel, fontsize=12)
    ax.invert_yaxis()  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–≤–µ—Ä—Ö—É

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
    for bar in bars:
        ax.text(bar.get_width() + (max(values) * 0.01), bar.get_y() + bar.get_height()/2, f'{bar.get_width()}', va='center')

    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    plt.close(fig)
    buf.seek(0)
    return buf


@router.callback_query(F.data == "admin_stats")
async def show_stats_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        reply_markup=get_stats_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats_bookings")
async def show_bookings_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø–∏—Å—è–º."""
    all_bookings = await get_all_bookings()

    if not all_bookings:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    else:
        total_bookings = len(all_bookings)
        service_counts = Counter(b.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') for b in all_bookings)

        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø–∏—Å—è–º (–≤—Å–µ–≥–æ {total_bookings}):</b>\n\n"
        text += "<b>–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        for service, count in service_counts.most_common():
            text += f"  ‚Ä¢ {service}: {count} —Ä–∞–∑(–∞)\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_menu_keyboard("admin_stats")
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats_shop")
async def show_shop_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞–≥–∞–∑–∏–Ω—É."""
    all_orders = await get_all_orders()

    if not all_orders:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    else:
        total_orders = len(all_orders)
        total_revenue = sum(o.get('total_price', 0) for o in all_orders)
        avg_check = total_revenue / total_orders if total_orders > 0 else 0

        promocode_counts = Counter(o.get('promocode') for o in all_orders if o.get('promocode'))

        text = f"üõí <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É:</b>\n\n"
        text += f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>\n"
        text += f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue:.2f} —Ä—É–±.</b>\n"
        text += f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{avg_check:.2f} —Ä—É–±.</b>\n\n"

        if promocode_counts:
            text += "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n"
            for code, count in promocode_counts.most_common():
                text += f"  ‚Ä¢ '{code}': {count} —Ä–∞–∑(–∞)\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_menu_keyboard("admin_stats")
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats_custom_period")
async def start_custom_period_stats(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    await state.set_state(AdminStates.choosing_stats_start_date)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–∞—á–∞–ª—å–Ω—É—é</b> –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=create_stats_calendar()
    )
    await callback.answer()


@router.callback_query(StatsCalendarCallback.filter(F.action.in_(["prev-month", "next-month"])), AdminStates.choosing_stats_start_date)
@router.callback_query(StatsCalendarCallback.filter(F.action.in_(["prev-month", "next-month"])), AdminStates.choosing_stats_end_date)
async def stats_calendar_navigate(callback: CallbackQuery, callback_data: StatsCalendarCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    year, month = callback_data.year, callback_data.month

    if callback_data.action == "prev-month":
        month -= 1
        if month == 0: month, year = 12, year - 1
    else:
        month += 1
        if month == 13: month, year = 1, year + 1

    await callback.message.edit_reply_markup(reply_markup=create_stats_calendar(year=year, month=month))
    await callback.answer()


@router.callback_query(StatsCalendarCallback.filter(F.action == "select-day"), AdminStates.choosing_stats_start_date)
async def select_stats_start_date(callback: CallbackQuery, callback_data: StatsCalendarCallback, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã."""
    start_date = datetime(year=callback_data.year, month=callback_data.month, day=callback_data.day)
    await state.update_data(start_date=start_date)
    await state.set_state(AdminStates.choosing_stats_end_date)
    await callback.message.edit_text(
        f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: <b>{start_date.strftime('%d.%m.%Y')}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–Ω–µ—á–Ω—É—é</b> –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=create_stats_calendar(year=callback_data.year, month=callback_data.month)
    )
    await callback.answer()


@router.callback_query(StatsCalendarCallback.filter(F.action == "select-day"), AdminStates.choosing_stats_end_date)
async def select_stats_end_date(callback: CallbackQuery, callback_data: StatsCalendarCallback, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç."""
    user_data = await state.get_data()
    start_date = user_data.get('start_date')
    end_date = datetime(year=callback_data.year, month=callback_data.month, day=callback_data.day).replace(hour=23, minute=59, second=59)

    if not start_date or start_date > end_date:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π!", show_alert=True)
        return

    await callback.message.edit_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
    report_text = await generate_period_report_text(start_date, end_date)
    await callback.message.edit_text(report_text, reply_markup=get_stats_menu_keyboard())
    await state.clear()


@router.callback_query(F.data == "admin_chart_bookings")
async def show_bookings_stats_chart(callback: CallbackQuery, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∑–∞–ø–∏—Å—è–º."""
    if plt is None:
        await callback.answer("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (matplotlib) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", show_alert=True)
        return

    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫...")
    all_bookings = await get_all_bookings()
    service_counts = Counter(b.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') for b in all_bookings)

    chart_buffer = _generate_bar_chart(service_counts, "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —É—Å–ª—É–≥", "–£—Å–ª—É–≥–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π")

    if chart_buffer:
        await bot.send_photo(callback.from_user.id, types.BufferedInputFile(chart_buffer.read(), "bookings_stats.png"), caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥.")
    else:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")


@router.callback_query(F.data == "admin_chart_shop")
async def show_shop_stats_chart(callback: CallbackQuery, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º."""
    if plt is None:
        await callback.answer("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (matplotlib) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", show_alert=True)
        return

    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫...")
    all_orders = await get_all_orders()
    promocode_counts = Counter(o.get('promocode') for o in all_orders if o.get('promocode'))

    chart_buffer = _generate_bar_chart(promocode_counts, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", "–ü—Ä–æ–º–æ–∫–æ–¥", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")

    if chart_buffer:
        await bot.send_photo(callback.from_user.id, types.BufferedInputFile(chart_buffer.read(), "promocodes_stats.png"), caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
    else:
        await callback.message.answer("–ü—Ä–æ–º–æ–∫–æ–¥—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å.")


@router.callback_query(F.data == "admin_export_bookings_csv")
async def export_bookings_csv(callback: CallbackQuery, bot: Bot):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ CSV —Ñ–∞–π–ª."""
    await callback.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...")
    all_bookings = await get_all_bookings()
    if not all_bookings:
        await callback.message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=all_bookings[0].keys())
    writer.writeheader()
    writer.writerows(all_bookings)
    output.seek(0)

    await bot.send_document(callback.from_user.id, types.BufferedInputFile(output.getvalue().encode('utf-8-sig'), "all_bookings.csv"), caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π.")


@router.callback_query(F.data == "admin_export_orders_csv")
async def export_orders_csv(callback: CallbackQuery, bot: Bot):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ CSV —Ñ–∞–π–ª."""
    await callback.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...")
    all_orders = await get_all_orders()
    if not all_orders:
        await callback.message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    export_data = [order.copy() for order in all_orders]
    for order in export_data:
        order['cart'] = json.dumps(order.get('cart', {}), ensure_ascii=False)

    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=export_data[0].keys())
    writer.writeheader()
    writer.writerows(export_data)
    output.seek(0)

    await bot.send_document(callback.from_user.id, types.BufferedInputFile(output.getvalue().encode('utf-8-sig'), "all_orders.csv"), caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.")