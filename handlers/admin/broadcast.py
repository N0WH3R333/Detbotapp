import logging
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter

from keyboards.admin_inline import get_broadcast_options_keyboard, get_back_to_menu_keyboard, get_button_markup
from utils.broadcast import send_broadcast
from database.db import get_all_unique_user_ids

logger = logging.getLogger(__name__)
router = Router()

# TODO: –î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ –≤—Å–µ –∞–¥–º–∏–Ω—ã, –∞ –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ SUPER_ADMIN
# from middlewares.admin_filter import IsSuperAdmin
# router.message.filter(IsSuperAdmin())
# router.callback_query.filter(IsSuperAdmin())

class BroadcastStates(StatesGroup):
    getting_message = State()
    confirmation = State()
    getting_button_text = State()
    getting_button_callback = State()


@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.clear()
    await state.set_state(BroadcastStates.getting_message)
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=get_back_to_menu_keyboard("admin_back_to_main")
    )
    await callback.answer()


@router.message(BroadcastStates.getting_message)
async def get_broadcast_message(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä."""
    await state.update_data(
        message_id=message.message_id,
        from_chat_id=message.chat.id,
        button=None
    )
    
    await message.answer("–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=message.message_id)

    await state.set_state(BroadcastStates.confirmation)
    await message.answer(
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=get_broadcast_options_keyboard()
    )


@router.callback_query(F.data == "broadcast_send", BroadcastStates.confirmation)
async def confirm_and_send(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await state.clear()

    await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    user_ids = await get_all_unique_user_ids()
    successful, failed = await send_broadcast(bot=bot, user_ids=list(user_ids), content=data)
    
    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì¨ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )
    await callback.answer()


@router.callback_query(F.data == "broadcast_add_button", BroadcastStates.confirmation)
async def add_button_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastStates.getting_button_text)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.",
        reply_markup=get_back_to_menu_keyboard("broadcast_cancel") # –û–±—â–∞—è –æ—Ç–º–µ–Ω–∞
    )
    await callback.answer()


@router.message(BroadcastStates.getting_button_text)
async def get_button_text(message: Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await state.set_state(BroadcastStates.getting_button_callback)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ callback-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _). "
        "–≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏.",
        reply_markup=get_back_to_menu_keyboard("broadcast_cancel")
    )


@router.message(BroadcastStates.getting_button_callback)
async def get_button_callback(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    button_data = {"text": data['button_text'], "callback_data": message.text}
    await state.update_data(button=button_data)
    
    await message.answer("–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:")
    await bot.copy_message(
        chat_id=message.chat.id, from_chat_id=data['from_chat_id'],
        message_id=data['message_id'], reply_markup=get_button_markup(button_data)
    )

    await state.set_state(BroadcastStates.confirmation)
    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=get_broadcast_options_keyboard())


@router.callback_query(F.data == "broadcast_cancel", StateFilter(BroadcastStates))
async def cancel_process(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()