import logging
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.db import add_candidate_to_db
from config import ADMIN_IDS
from keyboards.reply import get_main_menu_keyboard

router = Router()
logger = logging.getLogger(__name__)

HIRING_INFO_TEXT = """
<b>üõ†Ô∏è –†–∞–±–æ—Ç–∞ –≤ –Ω–∞—à–µ–º –¥–µ—Ç–µ–π–ª–∏–Ω–≥-—Ü–µ–Ω—Ç—Ä–µ!</b>

–ú—ã –≤—Å–µ–≥–¥–∞ –≤ –ø–æ–∏—Å–∫–µ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö –∏ —É–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–≤–æ–∏–º –¥–µ–ª–æ–º –ª—é–¥–µ–π. –ï—Å–ª–∏ –≤—ã –ª—é–±–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –º—ã, –∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É.

<b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>
- –î—Ä—É–∂–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤.
- –†–∞–±–æ—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –æ–±—É—á–µ–Ω–∏—è.
- –î–æ—Å—Ç–æ–π–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞.

<b>–ö–æ–≥–æ –º—ã –∏—â–µ–º:</b>
- –ú–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –ø–æ–ª–∏—Ä–æ–≤–∫–µ –∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏—é –∑–∞—â–∏—Ç–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π.
- –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Ö–∏–º—á–∏—Å—Ç–∫–µ —Å–∞–ª–æ–Ω–∞.
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

–ï—Å–ª–∏ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–¥–Ω–∞ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –∏ –ø–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—é–º–µ (–¥–æ–∫—É–º–µ–Ω—Ç–æ–º).
"""

class HiringStates(StatesGroup):
    writing_application = State()

def get_apply_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data="apply_now")
    return builder.as_markup()

@router.message(F.text == "üõ†Ô∏è –†–∞–±–æ—Ç–∞ —É –Ω–∞—Å")
async def show_hiring_info(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        HIRING_INFO_TEXT,
        reply_markup=get_apply_keyboard()
    )

@router.callback_query(F.data == "apply_now")
async def start_application(callback: CallbackQuery, state: FSMContext):
    await state.set_state(HiringStates.writing_application)
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª (—Ä–µ–∑—é–º–µ) –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É.",
        reply_markup=None
    )
    await callback.answer()

async def _notify_admins_of_new_candidate(bot: Bot, candidate: dict, user_info: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    if not ADMIN_IDS:
        return

    admin_text = (
        f"üì¨ <b>–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é! (ID: {candidate['id']})</b>\n\n"
        f"<b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {user_info['full_name']} (<code>{user_info['id']}</code>, @{user_info['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<pre>{candidate.get('message_text') or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞.'}</pre>"
    )
    for admin_id in ADMIN_IDS:
        try:
            await (bot.send_document(admin_id, document=candidate['file_id'], caption=admin_text) if candidate.get('file_id') else bot.send_message(admin_id, admin_text))
        except Exception as e:
            logger.error(f"Failed to send new candidate notification to admin {admin_id}: {e}")

@router.message(HiringStates.writing_application, F.text | F.document)
async def process_application(message: Message, state: FSMContext, bot: Bot):
    user = message.from_user
    text = message.text or message.caption or ""
    file_id = message.document.file_id if message.document else None
    file_name = message.document.file_name if message.document else None

    if not text and not file_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª.")
        return

    new_candidate = await add_candidate_to_db(
        user_id=user.id, user_full_name=user.full_name, user_username=user.username,
        message_text=text, file_id=file_id, file_name=file_name
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    await _notify_admins_of_new_candidate(bot, new_candidate, {
        "id": user.id,
        "full_name": user.full_name,
        "username": user.username
    })

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∫–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –µ—Å–ª–∏ –≤–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –Ω–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()