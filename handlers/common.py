import logging
import math
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery

from keyboards.reply import get_main_menu_keyboard
from keyboards.inline import get_my_bookings_keyboard, CancelBooking, OrderPaginator, get_orders_keyboard, CancelOrder
from database.db import get_user_bookings, cancel_booking_in_db, get_user_orders, cancel_order_in_db, get_product_by_id
from config import WEBAPP_URL, ADMIN_ID
from utils.scheduler import cancel_reminder

ORDERS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart(), StateFilter(None))
async def cmd_start(message: Message):
    # –ú—ã –±–æ–ª—å—à–µ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –¥–µ—Ç–µ–π–ª–∏–Ω–≥-—Ü–µ–Ω—Ç—Ä.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_main_menu_keyboard(webapp_url=WEBAPP_URL)
    )


@router.message(F.text == "üìì –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_my_bookings(message: Message):
    logger.debug(f"User {message.from_user.id} requested their bookings.")
    bookings = await get_user_bookings(user_id=message.from_user.id)

    if not bookings:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    response_text = "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for booking in bookings:
        response_text += f"<b>–ó–∞–ø–∏—Å—å #{booking['id']}</b>\n"
        price_str = f" - {booking['price']} —Ä—É–±." if 'price' in booking else ""
        response_text += f"–£—Å–ª—É–≥–∞: {booking['service']}{price_str}\n"
        response_text += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {booking['date']} –≤ {booking['time']}\n\n"

    await message.answer(
        response_text,
        reply_markup=get_my_bookings_keyboard(bookings)
    )


@router.callback_query(CancelBooking.filter())
async def cancel_my_booking(callback: CallbackQuery, callback_data: CancelBooking):
    logger.debug(f"User {callback.from_user.id} initiated cancellation for booking_id={callback_data.booking_id}")
    user_id = callback.from_user.id
    booking_id_to_cancel = callback_data.booking_id

    # 1. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –Ω–∞—à–µ–π "–±–∞–∑—ã"
    cancelled_booking = await cancel_booking_in_db(user_id=user_id, booking_id=booking_id_to_cancel)

    if not cancelled_booking:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
        return

    # 1.5. –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await cancel_reminder(booking_id=booking_id_to_cancel)

    # 2. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    remaining_bookings = await get_user_bookings(user_id=user_id)

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not remaining_bookings:
        await callback.message.edit_text("‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    else:
        response_text = "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        for booking in remaining_bookings:
            response_text += f"<b>–ó–∞–ø–∏—Å—å #{booking['id']}</b>\n"
            price_str = f" - {booking['price']} —Ä—É–±." if 'price' in booking else ""
            response_text += f"–£—Å–ª—É–≥–∞: {booking['service']}{price_str}\n"
            response_text += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {booking['date']} –≤ {booking['time']}\n\n"

        await callback.message.edit_text(
            response_text,
            reply_markup=get_my_bookings_keyboard(remaining_bookings)
        )

    await callback.answer(f"–ó–∞–ø–∏—Å—å #{booking_id_to_cancel} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard(webapp_url=WEBAPP_URL))


async def format_orders_page(orders_on_page: list[dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    response_text = "<b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
    for order in orders_on_page:
        response_text += f"<b>–ó–∞–∫–∞–∑ #{order['id']} –æ—Ç {order['date']}</b>\n"
        response_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.get('status', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ')}\n"
        shipping_method = order.get("shipping_method", "–ù–µ —É–∫–∞–∑–∞–Ω")
        delivery_cost = order.get("delivery_cost", 0)
        promocode = order.get("promocode")
        discount_amount = order.get("discount_amount", 0)
        address = order.get("address")
        for item_id, quantity in order['cart'].items():
            product = await get_product_by_id(item_id) or {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"}
            response_text += f"  - {product['name']} x {quantity} —à—Ç.\n"
        if discount_amount > 0 and promocode:
            response_text += f"<i>–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É '{promocode}': -{discount_amount:.2f} —Ä—É–±.</i>\n"
        response_text += f"<i>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {shipping_method}</i>\n"
        if address:
            response_text += f"<i>–ê–¥—Ä–µ—Å: {address}</i>\n"
        if delivery_cost > 0:
            response_text += f"<i>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost} —Ä—É–±.</i>\n"
        response_text += f"<i>–ò—Ç–æ–≥–æ: {order['total_price']:.2f} —Ä—É–±.</i>\n\n"
    return response_text


@router.message(F.text == "üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_my_orders(message: Message):
    logger.debug(f"User {message.from_user.id} requested their orders.")
    user_id = message.from_user.id
    orders = await get_user_orders(user_id=user_id)
    orders.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–≤—ã–º–∏

    if not orders:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return

    page = 0
    total_pages = math.ceil(len(orders) / ORDERS_PER_PAGE)
    text = await format_orders_page(orders[0:ORDERS_PER_PAGE])

    await message.answer(text, reply_markup=get_orders_keyboard(page=page, total_pages=total_pages, orders_on_page=orders[0:ORDERS_PER_PAGE]))


@router.callback_query(OrderPaginator.filter())
async def paginate_orders(callback: CallbackQuery, callback_data: OrderPaginator):
    page = callback_data.page + 1 if callback_data.action == "next" else callback_data.page - 1

    orders = await get_user_orders(user_id=callback.from_user.id)
    orders.reverse()

    total_pages = math.ceil(len(orders) / ORDERS_PER_PAGE)
    start_index = page * ORDERS_PER_PAGE
    end_index = start_index + ORDERS_PER_PAGE
    text = await format_orders_page(orders[start_index:end_index])

    await callback.message.edit_text(text, reply_markup=get_orders_keyboard(page=page, total_pages=total_pages, orders_on_page=orders[start_index:end_index]))
    await callback.answer()


@router.callback_query(CancelOrder.filter())
async def cancel_my_order(callback: CallbackQuery, callback_data: CancelOrder, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = callback.from_user.id
    order_id_to_cancel = callback_data.order_id

    cancelled_order = await cancel_order_in_db(user_id=user_id, order_id=order_id_to_cancel)

    if not cancelled_order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if ADMIN_ID:
        try:
            user = callback.from_user
            admin_text = (
                f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id_to_cancel}</b>\n\n"
                f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name}\n"
                f"<b>ID:</b> <code>{user.id}</code>\n"
                f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
            await bot.send_message(ADMIN_ID, admin_text)
        except Exception as e:
            logger.error(f"Failed to send order cancellation notification to admin {ADMIN_ID}. Error: {e}")

    await callback.answer(f"–ó–∞–∫–∞–∑ #{order_id_to_cancel} –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=False)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    orders = await get_user_orders(user_id=user_id)
    orders.reverse()

    if not orders:
        await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    page = 0
    total_pages = math.ceil(len(orders) / ORDERS_PER_PAGE)
    orders_on_page = orders[0:ORDERS_PER_PAGE]
    text = await format_orders_page(orders_on_page)

    await callback.message.edit_text(text, reply_markup=get_orders_keyboard(page=page, total_pages=total_pages, orders_on_page=orders_on_page))


@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã / –ü–æ–º–æ—â—å")
async def show_contacts(message: Message):
    contact_text = (
        "<b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è, –¥. 1\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href='tel:+79991234567'>+7 (999) 123-45-67</a>\n"
        "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    )
    await message.answer(contact_text, disable_web_page_preview=True)
