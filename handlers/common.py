import logging
import math
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from keyboards.reply import get_main_menu_keyboard
from keyboards.inline import get_my_bookings_keyboard, CancelBooking, OrderPaginator, get_orders_keyboard, CancelOrder
from database.db import get_user_bookings, cancel_booking_in_db, get_user_orders, cancel_order_in_db, get_all_products
from config import WEBAPP_URL, ADMIN_IDS
from utils.scheduler import cancel_reminder

ORDERS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    await state.clear()

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –¥–µ—Ç–µ–π–ª–∏–Ω–≥-—Ü–µ–Ω—Ç—Ä.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_main_menu_keyboard(webapp_url=WEBAPP_URL) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π, –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
    )


def _format_user_bookings(bookings: list[dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    status_map = {
        'pending_confirmation': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
    }
    response_text = "<b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for booking in bookings:
        status_text = status_map.get(booking.get('status'), '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        response_text += f"<b>–ó–∞–ø–∏—Å—å #{booking['id']} - {status_text}</b>\n"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
        price_str = f" - {booking.get('price', 0):.2f} —Ä—É–±." if 'price' in booking else ""
        response_text += f"–£—Å–ª—É–≥–∞: {booking.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}{price_str}\n"
        response_text += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {booking.get('date')} –≤ {booking.get('time')}\n"
        if comment := booking.get('comment'):
            response_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <b>{comment}</b>\n"
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 'media_files' –≤–º–µ—Å—Ç–æ 'photo_file_id'
        if media := booking.get('media_files'):
            response_text += f"<i>‚úì –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞: {len(media)} —à—Ç.</i>\n"
        response_text += "---\n"
    return response_text

@router.message(F.text == "üìì –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_my_bookings(message: Message):
    logger.debug(f"User {message.from_user.id} requested their bookings.")
    bookings = await get_user_bookings(user_id=message.from_user.id)

    if not bookings:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    response_text = _format_user_bookings(bookings)
    await message.answer(
        response_text,
        reply_markup=get_my_bookings_keyboard(bookings)
    )


@router.callback_query(CancelBooking.filter())
async def cancel_my_booking(callback: CallbackQuery, callback_data: CancelBooking, bot: Bot):
    logger.debug(f"User {callback.from_user.id} initiated cancellation for booking_id={callback_data.booking_id}")
    user_id = callback.from_user.id
    booking_id_to_cancel = callback_data.booking_id

    # 1. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –Ω–∞—à–µ–π "–±–∞–∑—ã"
    cancelled_booking = await cancel_booking_in_db(user_id=user_id, booking_id=booking_id_to_cancel)

    if not cancelled_booking:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
        return

    # 1.5. –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await cancel_reminder(booking_id=booking_id_to_cancel)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if ADMIN_IDS:
        user = callback.from_user
        admin_text = (
            f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å #{booking_id_to_cancel}</b>\n\n"
            f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name}\n"
            f"<b>ID:</b> <code>{user.id}</code>\n"
            f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"<b>–û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</b> {cancelled_booking.get('service', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"<b>–î–∞—Ç–∞:</b> {cancelled_booking.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –≤ {cancelled_booking.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, admin_text)
            except Exception as e:
                logger.error(f"Failed to send booking cancellation notification to admin {admin_id}. Error: {e}")

    # 2. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    remaining_bookings = await get_user_bookings(user_id=user_id)

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if not remaining_bookings:
            await callback.message.edit_text("‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        else:
            response_text = _format_user_bookings(remaining_bookings)
            await callback.message.edit_text(
                response_text,
                reply_markup=get_my_bookings_keyboard(remaining_bookings)
            )
    except TelegramBadRequest as e:
        if "message is not modified" in e.message:
            logger.warning("Message was not modified in cancel_my_booking, ignoring.")
        else:
            raise  # Re-raise other bad requests

    await callback.answer(f"–ó–∞–ø–∏—Å—å #{booking_id_to_cancel} –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def format_orders_page(orders_on_page: list[dict], all_products_dict: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    response_text = "<b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
    for order in orders_on_page:
        response_text += f"<b>–ó–∞–∫–∞–∑ #{order['id']} –æ—Ç {order['date']}</b>\n"
        response_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.get('status', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ')}\n"
        shipping_method = order.get("shipping_method", "–ù–µ —É–∫–∞–∑–∞–Ω")
        delivery_cost = order.get("delivery_cost", 0)
        promocode = order.get("promocode")
        discount_amount = order.get("discount_amount", 0)
        address = order.get("address")
        for item_id, quantity in order['cart'].items():
            product = all_products_dict.get(item_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"})
            response_text += f"  - {product['name']} x {quantity} —à—Ç.\n"
        if discount_amount > 0 and promocode:
            response_text += f"<i>–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É '{promocode}': -{discount_amount:.2f} —Ä—É–±.</i>\n"
        response_text += f"<i>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {shipping_method}</i>\n"
        if address:
            response_text += f"<i>–ê–¥—Ä–µ—Å: {address}</i>\n"
        if delivery_cost > 0:
            response_text += f"<i>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost} —Ä—É–±.</i>\n"
        response_text += f"<i>–ò—Ç–æ–≥–æ: {order['total_price']:.2f} —Ä—É–±.</i>\n\n"
    return response_text


@router.message(F.text == "üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_my_orders(message: Message):
    logger.debug(f"User {message.from_user.id} requested their orders.")
    user_id = message.from_user.id
    orders = await get_user_orders(user_id=user_id)
    orders.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–≤—ã–º–∏

    if not orders:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return

    page = 0
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    all_products_list = await get_all_products()
    all_products_dict = {p['id']: p for p in all_products_list}
    total_pages = math.ceil(len(orders) / ORDERS_PER_PAGE)
    text = await format_orders_page(orders[0:ORDERS_PER_PAGE], all_products_dict)

    await message.answer(text, reply_markup=get_orders_keyboard(page=page, total_pages=total_pages, orders_on_page=orders[0:ORDERS_PER_PAGE]))


@router.callback_query(OrderPaginator.filter())
async def paginate_orders(callback: CallbackQuery, callback_data: OrderPaginator):
    page = callback_data.page + 1 if callback_data.action == "next" else callback_data.page - 1

    orders = await get_user_orders(user_id=callback.from_user.id)
    orders.reverse()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –∑–¥–µ—Å—å
    all_products_list = await get_all_products()
    all_products_dict = {p['id']: p for p in all_products_list}

    total_pages = math.ceil(len(orders) / ORDERS_PER_PAGE)
    start_index = page * ORDERS_PER_PAGE
    end_index = start_index + ORDERS_PER_PAGE
    text = await format_orders_page(orders[start_index:end_index], all_products_dict)

    await callback.message.edit_text(text, reply_markup=get_orders_keyboard(page=page, total_pages=total_pages, orders_on_page=orders[start_index:end_index]))
    await callback.answer()


@router.callback_query(CancelOrder.filter())
async def cancel_my_order(callback: CallbackQuery, callback_data: CancelOrder, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = callback.from_user.id
    order_id_to_cancel = callback_data.order_id

    cancelled_order = await cancel_order_in_db(user_id=user_id, order_id=order_id_to_cancel)

    if not cancelled_order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if ADMIN_IDS:
        user = callback.from_user
        admin_text = (
            f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id_to_cancel}</b>\n\n"
            f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {user.full_name}\n"
            f"<b>ID:</b> <code>{user.id}</code>\n"
            f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, admin_text)
            except Exception as e:
                logger.error(f"Failed to send order cancellation notification to admin {admin_id}. Error: {e}")

    await callback.answer(f"–ó–∞–∫–∞–∑ #{order_id_to_cancel} –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=False)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    orders = await get_user_orders(user_id=user_id)
    orders.reverse()

    if not orders:
        await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    page = 0
    all_products_list = await get_all_products()
    all_products_dict = {p['id']: p for p in all_products_list}
    total_pages = math.ceil(len(orders) / ORDERS_PER_PAGE)
    orders_on_page = orders[0:ORDERS_PER_PAGE]
    text = await format_orders_page(orders_on_page, all_products_dict)

    try:
        await callback.message.edit_text(text, reply_markup=get_orders_keyboard(page=page, total_pages=total_pages, orders_on_page=orders_on_page))
    except TelegramBadRequest as e:
        if "message is not modified" in e.message:
            logger.warning("Message was not modified in cancel_my_order, ignoring.")
        else:
            raise


@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã / –ü–æ–º–æ—â—å")
async def show_contacts(message: Message):
    contact_text = (
        "<b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å, —É–ª–∏—Ü–∞ –°—Ç–∞—Ä–æ–º–∞—Ä—å–µ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 12 –∫–æ—Ä–ø—É—Å 2\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href='tel:+79188698866'>+79188698866</a>\n"
        "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 8:00 –¥–æ 19:00\n\n"
        "üó∫Ô∏è <b>–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ:</b>\n"
        "<a href='https://2gis.ru/stavropol/geo/70030076147466365/42.012416,45.051523'>–û—Ç–∫—Ä—ã—Ç—å –≤ 2–ì–ò–°</a>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    await message.answer(contact_text, disable_web_page_preview=True)
