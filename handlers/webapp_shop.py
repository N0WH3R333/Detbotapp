import json
from datetime import datetime
import logging
from aiogram import F, Router, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, User

from config import ADMIN_IDS, DELIVERY_COST
from database.db import add_order_to_db, get_all_products, get_all_promocodes, increment_promocode_usage, get_product_by_id
from keyboards.inline import get_shipping_keyboard
from keyboards.admin_inline import get_new_order_admin_keyboard

logger = logging.getLogger(__name__)
router = Router()


class OrderStates(StatesGroup):
    choosing_shipping = State()
    entering_address = State()


@router.message(F.web_app_data)
async def handle_webapp_data(message: Message, state: FSMContext):
    logger.debug(f"Received webapp data: {message.web_app_data.data}")
    try:
        data = json.loads(message.web_app_data.data)
    except json.JSONDecodeError:
        logger.error(f"Failed to decode JSON from webapp: {message.web_app_data.data}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if data.get('action') == 'checkout':
        cart = data.get('cart', {})
        if not cart:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ–¥–∏–Ω —Ä–∞–∑
        all_products_list = await get_all_products()
        all_products_dict = {p['id']: p for p in all_products_list}
        promocodes_db = await get_all_promocodes()

        items_price = 0
        for item_id, quantity in cart.items():
            product = all_products_dict.get(item_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä", "price": 0})
            items_price += product["price"] * quantity
        
        promocode = data.get('promocode')
        discount_percent = 0
        promo_data = promocodes_db.get(promocode) if promocode else None

        if promo_data:
            today = datetime.now().date()
            try:
                start_date = datetime.strptime(promo_data.get("start_date"), "%Y-%m-%d").date()
                end_date = datetime.strptime(promo_data.get("end_date"), "%Y-%m-%d").date()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
                is_active = start_date <= today <= end_date
                usage_limit = promo_data.get("usage_limit")
                is_limit_ok = (usage_limit is None) or (promo_data.get("times_used", 0) < usage_limit)

                if is_active and is_limit_ok:
                    discount_percent = promo_data.get("discount", 0)
                else:
                    logger.warning(f"User {message.from_user.id} tried to use an invalid/expired/limit-reached promocode {promocode}.")
            except (ValueError, KeyError, TypeError):
                logger.warning(f"Promocode {promocode} has invalid data format, ignoring.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ FSM –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
        await state.update_data(
            cart=cart, 
            items_price=items_price, 
            promocode=promocode, 
            discount_percent=discount_percent
        )
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_shipping_keyboard()
        )
        await state.set_state(OrderStates.choosing_shipping)

def _build_user_confirmation_text(user_data: dict, all_products_dict: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cart = user_data.get('cart', {})
    items_price = user_data.get('items_price', 0)
    promocode = user_data.get('promocode')
    discount_amount = (items_price * user_data.get('discount_percent', 0)) / 100
    delivery_cost = user_data.get('delivery_cost', 0)
    total_price = items_price - discount_amount + delivery_cost
    shipping_method = user_data.get('shipping_method', '–ù–µ —É–∫–∞–∑–∞–Ω')
    address = user_data.get('address')

    text = "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!</b>\n\n–í—ã –∑–∞–∫–∞–∑–∞–ª–∏:\n"
    for item_id, quantity in cart.items():
        product = all_products_dict.get(item_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä", "price": 0})
        text += f"‚Ä¢ {product['name']} x {quantity} —à—Ç. = {product['price'] * quantity} —Ä—É–±.\n"
    
    text += f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: {items_price} —Ä—É–±.\n"
    if discount_amount > 0:
        text += f"–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É '{promocode}': -{discount_amount:.2f} —Ä—É–±.\n"
    if delivery_cost > 0:
        text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost} —Ä—É–±.\n"

    text += f"\n<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {shipping_method}"
    if address:
        text += f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {address}"
    text += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_price:.2f} —Ä—É–±.</b>"
    return text

async def _notify_admins_of_new_order(bot: Bot, user: User, order: dict, all_products_dict: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    if not ADMIN_IDS: return
 
    cart = order.get('cart', {})
    discount_amount = order.get('discount_amount', 0)
    delivery_cost = order.get('delivery_cost', 0)
    
    admin_text = (f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['id']}!</b>\n\n"
                  f"<b>–û—Ç:</b> {user.full_name} (ID: <code>{user.id}</code>)\n"
                  f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n")
    for item_id, quantity in cart.items():
        product = all_products_dict.get(item_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"})
        admin_text += f"‚Ä¢ {product['name']} x {quantity} —à—Ç.\n"
    if discount_amount > 0:
        admin_text += f"\n<b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {order.get('promocode')} (-{discount_amount:.2f} —Ä—É–±.)"
    if delivery_cost > 0:
        admin_text += f"\n<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_cost} —Ä—É–±."
    admin_text += f"\n<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {order.get('shipping_method')}"
    if address := order.get('address'):
        admin_text += f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {address}"
    admin_text += f"\n<b>–ò—Ç–æ–≥–æ: {order.get('total_price', 0):.2f} —Ä—É–±.</b>"
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, admin_text, reply_markup=get_new_order_admin_keyboard())
            logger.info(f"Admin {admin_id} has been notified about the new order from user {user.id}.")
        except Exception as e:
            logger.error(f"Failed to send notification to admin {admin_id}: {e}")

async def _finalize_order(message: Message, user: User, state: FSMContext, bot: Bot, is_callback: bool = False):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≤ —Ü–∏–∫–ª–µ
    all_products_list = await get_all_products()
    all_products_dict = {p['id']: p for p in all_products_list}

    user_data = await state.get_data()
    cart = user_data.get('cart', {})
    promocode = user_data.get('promocode')
    discount_amount = (user_data.get('items_price', 0) * user_data.get('discount_percent', 0)) / 100

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    order_details = {
        "cart": cart, "items_price": user_data.get('items_price', 0), 
        "promocode": promocode, "discount_amount": discount_amount, 
        "delivery_cost": user_data.get('delivery_cost', 0),
        "total_price": user_data.get('items_price', 0) - discount_amount + user_data.get('delivery_cost', 0), 
        "shipping_method": user_data.get('shipping_method', '–ù–µ —É–∫–∞–∑–∞–Ω')
    }
    if address := user_data.get('address'):
        order_details["address"] = address
    new_order = await add_order_to_db(
        user_id=user.id,
        user_full_name=user.full_name,
        user_username=user.username,
        order_details=order_details
    )

    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if promocode and discount_amount > 0:
        await increment_promocode_usage(promocode)

    response_text = _build_user_confirmation_text(user_data, all_products_dict)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if is_callback:
        await message.edit_text(response_text)
    else:
        await message.answer(response_text)

    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await _notify_admins_of_new_order(bot, user, new_order, all_products_dict)


@router.callback_query(OrderStates.choosing_shipping, F.data.startswith("shipping_"))
async def shipping_chosen(callback: CallbackQuery, state: FSMContext, bot: Bot):
    shipping_method_code = callback.data.split("_")[1]

    if shipping_method_code == "delivery":
        await state.update_data(shipping_method="–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º", delivery_cost=DELIVERY_COST)
        await callback.message.edit_text(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç {DELIVERY_COST} —Ä—É–±.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        await state.set_state(OrderStates.entering_address)
    else:  # –°–∞–º–æ–≤—ã–≤–æ–∑
        await state.update_data(shipping_method="–°–∞–º–æ–≤—ã–≤–æ–∑", delivery_cost=0)
        await _finalize_order(callback.message, callback.from_user, state, bot, is_callback=True)

    await callback.answer()


@router.message(OrderStates.entering_address, F.text)
async def address_entered(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(address=message.text)
    await _finalize_order(message, message.from_user, state, bot)