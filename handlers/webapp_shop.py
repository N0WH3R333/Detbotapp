import json
from datetime import datetime
import logging
from aiogram import F, Router, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, User

from config import ADMIN_ID, DELIVERY_COST
from database.db import add_order_to_db, get_all_products, get_all_promocodes, increment_promocode_usage, get_product_by_id
from keyboards.inline import get_shipping_keyboard
from keyboards.admin_inline import get_new_order_admin_keyboard

logger = logging.getLogger(__name__)
router = Router()


class OrderStates(StatesGroup):
    choosing_shipping = State()
    entering_address = State()


@router.message(F.web_app_data)
async def handle_webapp_data(message: Message, state: FSMContext):
    logger.debug(f"Received webapp data: {message.web_app_data.data}")
    try:
        data = json.loads(message.web_app_data.data)
    except json.JSONDecodeError:
        logger.error(f"Failed to decode JSON from webapp: {message.web_app_data.data}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if data.get('action') == 'checkout':
        cart = data.get('cart', {})
        if not cart:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        items_price = 0
        for item_id, quantity in cart.items():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
            product = await get_product_by_id(item_id) or {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä", "price": 0}
            items_price += product["price"] * quantity
        
        promocode = data.get('promocode')
        discount_percent = 0
        if promocode:
            promocodes_db = await get_all_promocodes()
            promo_data = promocodes_db.get(promocode)
            if promo_data:
                today = datetime.now().date()
                try:
                    start_date = datetime.strptime(promo_data.get("start_date"), "%Y-%m-%d").date()
                    end_date = datetime.strptime(promo_data.get("end_date"), "%Y-%m-%d").date()
                    if start_date <= today <= end_date:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
                        usage_limit = promo_data.get("usage_limit")
                        if usage_limit is not None:
                            times_used = promo_data.get("times_used", 0)
                            if times_used >= usage_limit:
                                logger.warning(f"User {message.from_user.id} tried to use a limit-reached promocode {promocode}.")
                                # –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–∫–∞–∑
                                discount_percent = 0
                            else:
                                discount_percent = promo_data.get("discount", 0)
                        else:
                            discount_percent = promo_data.get("discount", 0)
                except (ValueError, KeyError, TypeError):
                    logger.warning(f"Promocode {promocode} has invalid data format, ignoring.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ FSM –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
        await state.update_data(
            cart=cart, 
            items_price=items_price, 
            promocode=promocode, 
            discount_percent=discount_percent
        )
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_shipping_keyboard()
        )
        await state.set_state(OrderStates.choosing_shipping)


async def _finalize_order(message: Message, user: User, state: FSMContext, bot: Bot, is_callback: bool = False):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_data = await state.get_data()
    cart = user_data.get('cart', {})
    items_price = user_data.get('items_price', 0)
    promocode = user_data.get('promocode')
    discount_percent = user_data.get('discount_percent', 0)
    delivery_cost = user_data.get('delivery_cost', 0)
    discount_amount = (items_price * discount_percent) / 100
    total_price = items_price - discount_amount + delivery_cost
    shipping_method = user_data.get('shipping_method', '–ù–µ —É–∫–∞–∑–∞–Ω')
    address = user_data.get('address')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response_text = "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!</b>\n\n–í—ã –∑–∞–∫–∞–∑–∞–ª–∏:\n"
    for item_id, quantity in cart.items():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
        product = await get_product_by_id(item_id) or {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä", "price": 0}
        response_text += f"‚Ä¢ {product['name']} x {quantity} —à—Ç. = {product['price'] * quantity} —Ä—É–±.\n"
    
    response_text += f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: {items_price} —Ä—É–±.\n"
    if discount_amount > 0:
        response_text += f"–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É '{promocode}': -{discount_amount:.2f} —Ä—É–±.\n"
    if delivery_cost > 0:
        response_text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost} —Ä—É–±.\n"

    response_text += f"\n<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {shipping_method}"
    if address:
        response_text += f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {address}"
    response_text += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_price:.2f} —Ä—É–±.</b>"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    order_details = {
        "cart": cart, "items_price": items_price, "promocode": promocode, 
        "discount_amount": discount_amount, "delivery_cost": delivery_cost,
        "total_price": total_price, "shipping_method": shipping_method
    }
    if address:
        order_details["address"] = address
    new_order = await add_order_to_db(
        user_id=user.id,
        user_full_name=user.full_name,
        user_username=user.username,
        order_details=order_details
    )

    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if promocode and discount_amount > 0:
        await increment_promocode_usage(promocode)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if is_callback:
        await message.edit_text(response_text)
    else:
        await message.answer(response_text)

    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if ADMIN_ID:
        try:
            admin_text = f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{new_order['id']}!</b>\n\n<b>–û—Ç:</b> {user.full_name} (ID: <code>{user.id}</code>)\n"
            admin_text += f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
            for item_id, quantity in cart.items():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
                product = await get_product_by_id(item_id) or {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"}
                admin_text += f"‚Ä¢ {product['name']} x {quantity} —à—Ç.\n"
            if discount_amount > 0:
                admin_text += f"\n<b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promocode} (-{discount_amount:.2f} —Ä—É–±.)"
            if delivery_cost > 0:
                admin_text += f"\n<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_cost} —Ä—É–±."
            admin_text += f"\n<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {shipping_method}"
            if address:
                admin_text += f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {address}"
            admin_text += f"\n<b>–ò—Ç–æ–≥–æ: {total_price:.2f} —Ä—É–±.</b>"
            await bot.send_message(
                ADMIN_ID,
                admin_text,
                reply_markup=get_new_order_admin_keyboard()
            )
            logger.info(f"Admin {ADMIN_ID} has been notified about the new order from user {user.id}.")
        except Exception as e:
            logger.error(f"Failed to send notification to admin {ADMIN_ID}: {e}")


@router.callback_query(OrderStates.choosing_shipping, F.data.startswith("shipping_"))
async def shipping_chosen(callback: CallbackQuery, state: FSMContext, bot: Bot):
    shipping_method_code = callback.data.split("_")[1]

    if shipping_method_code == "delivery":
        await state.update_data(shipping_method="–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º", delivery_cost=DELIVERY_COST)
        await callback.message.edit_text(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç {DELIVERY_COST} —Ä—É–±.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        await state.set_state(OrderStates.entering_address)
    else:  # –°–∞–º–æ–≤—ã–≤–æ–∑
        await state.update_data(shipping_method="–°–∞–º–æ–≤—ã–≤–æ–∑", delivery_cost=0)
        await _finalize_order(callback.message, callback.from_user, state, bot, is_callback=True)

    await callback.answer()


@router.message(OrderStates.entering_address, F.text)
async def address_entered(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(address=message.text)
    await _finalize_order(message, message.from_user, state, bot)