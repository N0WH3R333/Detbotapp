from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import get_product_by_id
from utils.constants import SERVICE_NAMES


class AdminOrdersPaginator(CallbackData, prefix="admin_order_page"):
    action: str
    page: int


class AdminBookingsPaginator(CallbackData, prefix="admin_booking_page"):
    action: str
    page: int
    period: str  # today, week, month


class AdminSetOrderStatus(CallbackData, prefix="admin_set_status"):
    order_id: int
    status: str # 'assembled' –∏–ª–∏ 'shipped'


class AdminClientPaginator(CallbackData, prefix="admin_client_page"):
    action: str
    page: int


class AdminEditOrder(CallbackData, prefix="admin_edit_order"):
    action: str  # 'remove_item', 'finish'
    order_id: int
    item_id: str | None = None # ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è


class AdminEditClient(CallbackData, prefix="admin_edit_client"):
    action: str # 'select', 'edit_name'
    user_id: int


class AdminPriceEdit(CallbackData, prefix="admin_price_edit"):
    action: str # 'navigate' or 'edit'
    # path is a colon-separated string like 'polishing:small:light_polishing'
    path: str


class AdminManageCandidate(CallbackData, prefix="adm_candidate"):
    action: str  # view, delete, back_list, get_file
    candidate_id: int
    page: int


class AdminCandidatesPaginator(CallbackData, prefix="adm_cand_pag"):
    action: str  # prev, next, noop
    page: int


def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üóìÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏", callback_data="admin_booking_management")
    builder.button(text="üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="admin_order_management")
    builder.button(text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", callback_data="admin_promocode_management")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    builder.button(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏", callback_data="admin_client_management")
    builder.button(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data="admin_price_management")
    builder.button(text="üì¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    builder.button(text="üö∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏", callback_data="admin_block_management")
    builder.button(text="üì¨ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã", callback_data="admin_candidates_management")
    builder.adjust(1)
    return builder.as_markup()

def get_promocode_management_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_add_promocode_start")
    builder.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_show_promocodes")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    return builder.as_markup()

def get_promocode_type_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üõçÔ∏è –î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞", callback_data="admin_add_promo_type_shop")
    builder.button(text="‚ú® –î–ª—è —É—Å–ª—É–≥ –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞", callback_data="admin_add_promo_type_detailing")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_promocode_management")
    builder.adjust(1)
    return builder.as_markup()

def get_booking_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="admin_bookings_today"),
        InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="admin_bookings_week"),
        InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="admin_bookings_month")
    )
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID", callback_data="admin_cancel_booking_start"))
    builder.row(InlineKeyboardButton(text="üóìÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏", callback_data="admin_manage_closed_days"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
    return builder.as_markup()

def get_block_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block_user"))
    builder.row(InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_unblock_user"))
    builder.row(InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", callback_data="admin_show_blocked"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
    return builder.as_markup()

def get_back_to_menu_keyboard(menu_callback: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=menu_callback))
    return builder.as_markup()

def get_stats_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìà –ü–æ –∑–∞–ø–∏—Å—è–º (—Ç–µ–∫—Å—Ç)", callback_data="admin_stats_bookings"),
        InlineKeyboardButton(text="üõí –ü–æ –º–∞–≥–∞–∑–∏–Ω—É (—Ç–µ–∫—Å—Ç)", callback_data="admin_stats_shop")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ —É—Å–ª—É–≥–∞–º", callback_data="admin_chart_bookings"),
        InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º", callback_data="admin_chart_shop")
    )
    builder.row(
        InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π (CSV)", callback_data="admin_export_bookings_csv"),
        InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ (CSV)", callback_data="admin_export_orders_csv")
    )
    builder.row(InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="admin_stats_custom_period"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
    return builder.as_markup()

def get_order_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_last_orders"))
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞", callback_data="admin_edit_order_start"))
    builder.row(InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data="admin_change_order_status_start"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID", callback_data="admin_cancel_order_start"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
    return builder.as_markup()


def get_broadcast_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="admin_broadcast_confirm"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast_cancel"))
    return builder.as_markup()


def get_admin_paginator(page: int, total_pages: int, paginator_type: AdminOrdersPaginator | AdminBookingsPaginator, back_callback: str) -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏."""
    builder = InlineKeyboardBuilder()
    pagination_row = []

    if page > 0:
        pagination_row.append(InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data=paginator_type(action="prev", page=page).pack()))

    if total_pages > 1:
        pagination_row.append(InlineKeyboardButton(text=f"{page + 1} / {total_pages}", callback_data="ignore_page_count"))

    if page < total_pages - 1:
        pagination_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ >", callback_data=paginator_type(action="next", page=page).pack()))

    if pagination_row:
        builder.row(*pagination_row)

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=back_callback))
    return builder.as_markup()


def get_set_order_status_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚úÖ –°–æ–±—Ä–∞–Ω", callback_data=AdminSetOrderStatus(order_id=order_id, status="assembled").pack()))
    builder.row(InlineKeyboardButton(text="üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data=AdminSetOrderStatus(order_id=order_id, status="shipped").pack()))
    return builder.as_markup()


def get_new_order_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚û°Ô∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞–º–∏", callback_data="admin_order_management"))
    return builder.as_markup()


async def get_order_editing_keyboard(order: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–∫–∞–∑–∞."""
    builder = InlineKeyboardBuilder()
    cart = order.get('cart', {})
    order_id = order.get('id')

    if not cart:
        builder.row(InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", callback_data="ignore"))
    else:
        for item_id, quantity in cart.items():
            product = await get_product_by_id(item_id) or {}
            product_name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
            builder.row(
                InlineKeyboardButton(
                    text=f"{product_name} ({quantity} —à—Ç.)",
                    callback_data="ignore"
                ),
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å 1 —à—Ç.",
                    callback_data=AdminEditOrder(action="remove_item", order_id=order_id, item_id=item_id).pack()
                )
            )

    builder.row(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=AdminEditOrder(action="finish", order_id=order_id).pack()))
    return builder.as_markup()


def get_price_editing_keyboard(price_data: dict, current_path: str = "") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω.
    price_data: —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞—Ä—è —Ü–µ–Ω.
    current_path: —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ 'key1:key2'.
    """
    builder = InlineKeyboardBuilder()

    for key, value in price_data.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è callback_data
        new_path = f"{current_path}|{key}" if current_path else key

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        display_name = SERVICE_NAMES.get(key, key.replace('_', ' ').capitalize())

        if isinstance(value, dict):
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å, —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            builder.button(
                text=f"‚û°Ô∏è {display_name}",
                callback_data=AdminPriceEdit(action="navigate", path=new_path).pack()
            )
        elif isinstance(value, (int, float)):
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —á–∏—Å–ª–æ, —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
            builder.button(
                text=f"‚úèÔ∏è {display_name}: {value} —Ä—É–±.",
                callback_data=AdminPriceEdit(action="edit", path=new_path).pack()
            )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if current_path:
        parent_path = "|".join(current_path.split('|')[:-1])
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=AdminPriceEdit(action="navigate", path=parent_path).pack()
        ))
    else:
        # –ï—Å–ª–∏ –º—ã –≤ –∫–æ—Ä–Ω–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_main"))

    builder.adjust(1)
    return builder.as_markup()


def get_clients_list_keyboard(clients_on_page: list[dict], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    for client in clients_on_page:
        user_id = client['user_id']
        name = client.get('user_full_name', f"ID: {user_id}")
        username = client.get('user_username')
        display_name = f"{name}" + (f" (@{username})" if username else "")

        builder.row(
            InlineKeyboardButton(text=display_name, callback_data="ignore"),
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                callback_data=AdminEditClient(action="select", user_id=user_id).pack()
            )
        )

    # Paginator
    pagination_row = []
    if page > 0:
        pagination_row.append(InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data=AdminClientPaginator(action="prev", page=page).pack()))
    if total_pages > 1:
        pagination_row.append(InlineKeyboardButton(text=f"{page + 1} / {total_pages}", callback_data="ignore"))
    if page < total_pages - 1:
        pagination_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ >", callback_data=AdminClientPaginator(action="next", page=page).pack()))

    if pagination_row:
        builder.row(*pagination_row)

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_main"))
    return builder.as_markup()


def get_client_editing_keyboard(user_id: int, user_full_name: str, back_callback: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ({user_full_name})", callback_data=AdminEditClient(action="edit_name", user_id=user_id).pack())
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data=back_callback)
    builder.adjust(1)
    return builder.as_markup()


def get_candidates_list_keyboard(candidates_on_page: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    builder = InlineKeyboardBuilder()
    for candidate in candidates_on_page:
        builder.button(
            text=f"–û—Ç–∫–ª–∏–∫ #{candidate['id']} –æ—Ç {candidate['user_full_name']}",
            callback_data=AdminManageCandidate(action="view", candidate_id=candidate['id'], page=page).pack()
        )
    builder.adjust(1)

    pagination_row = []
    if page > 0:
        pagination_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=AdminCandidatesPaginator(action="prev", page=page).pack())
        )
    if page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=AdminCandidatesPaginator(action="next", page=page).pack())
        )
    if pagination_row:
        builder.row(*pagination_row)

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))
    return builder.as_markup()